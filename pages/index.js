import Head from "next/head";
import { useEffect, useState } from "react";
import styles from "../styles/Home.module.css";
import { Flex, Heading, Stack } from "@chakra-ui/react";
import { motion } from "framer-motion";

export default function Home() {
  const [animate, setAnimate] = useState(false);

  let mouse = 0,
    timer = 0,
    timeout = 0,
    average = 0,
    count = 0,
    interpretation = [
      "–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ! –ú–æ–∂–Ω–æ —Å–∞–¥–∏—Ç—å—Å—è –∑–∞ —à—Ç—É—Ä–≤–∞–ª –∏—Å—Ç—Ä–µ–±–∏—Ç–µ–ª—è –∏–ª–∏ –±–æ–ª–∏–¥–∞ —Ñ–æ—Ä–º—É–ª—ã 1",
      "–≠—Ç–æ –ø—è—Ç—å —Å –ø–ª—é—Å–æ–º! –ß–µ–º–ø–∏–æ–Ω—ã –º–∏—Ä–∞ –ø–æ –ø–∏–Ω–≥-–ø–æ–Ω–≥—É –∏ –±–æ–∫—Å—É —Å–º–æ—Ç—Ä—è—Ç –Ω–∞ –í–∞—Å –∫–∞–∫ –Ω–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞",
      "–í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ! –ú–∞—Å—Ç–µ—Ä–∞ —Å–ø–æ—Ä—Ç–∞ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ –æ–¥–æ–±—Ä—è—é—Ç",
      "–•–æ—Ä–æ—à–æ! –ú–∞—Å—Ç–µ—Ä —Å–ø–æ—Ä—Ç–∞ —É –í–∞—Å –≤ –∫–∞—Ä–º–∞–Ω–µ",
      "–ù–µ–ø–ª–æ—Ö–æ. –ö–ú–° –∑–∞—á—Ç–µ–Ω",
      "–ù–æ—Ä–º–∞–ª—å–Ω–æ. –í—ã –∞–∫—Ç–∏–≤–Ω—ã, –º–æ–∂–µ—Ç–µ –ª—É—á—à–µ",
      "–°—Ä–µ–¥–Ω–µ–Ω—å–∫–æ. –°–∫–æ—Ä–æ—Å—Ç—å —Ä–µ–∞–∫—Ü–∏–∏, –∫–∞–∫ –∏ —É –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –ª—é–¥–µ–π",
      "–ù–µ—É–¥",
      "–ù–µ–∑–∞—á–µ—Ç",
      "–í—ã –≤–æ–æ–±—â–µ –∂–∏–≤—ã —Ç–∞–º? –õ—É—á—à–µ –æ—Ç–¥–æ—Ö–Ω–∏—Ç–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞",
    ],
    results = (e) =>
      interpretation[
        [150, 170, 190, 200, 210, 230, 270, 350, 500, Infinity].findIndex(
          (i) => e <= i
        )
      ],
    ending = (e) =>
      ["–ø–æ–ø—ã—Ç–∫—É", "–ø–æ–ø—ã—Ç–∫–∏", "–ø–æ–ø—ã—Ç–æ–∫"][
        e % 100 > 4 && e % 100 < 20
          ? 2
          : [2, 0, 1, 1, 1, 2][e % 10 < 5 ? e % 10 : 5]
      ],
    react = () => {
      if (animate === true) {
        if (timer > 0) {
          timer = performance.now() - timer;
          average += timer;
          document.body.style.cssText = "";
          document.body.innerHTML =
            timer.toFixed(3) +
            " –º—Å<p>" +
            results(timer) +
            ".<br><br>–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞ " +
            ++count +
            " " +
            ending(count) +
            ": " +
            (average / count).toFixed() +
            " –º—Å</p>";

          timer = mouse = 0;
        } else if (mouse == 1) {
          clearTimeout(timeout);
          document.body.textContent = "–°–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ üòì";

          timer = mouse = 0;
        } else {
          mouse = 1;
          document.body.textContent = "–ñ–¥–∏—Ç–µ –∑–µ–ª–µ–Ω—ã–π üü¢";
          timeout = setTimeout(() => {
            timer = performance.now();
            document.body.style.background =
              "linear-gradient(#2F855A, #276749)";
          }, Math.floor([750, 1500, 2250][count % 3] + Math.random() * 1000));
        }
      }
    };

  useEffect(() => {
    setTimeout(() => {
      setAnimate(true);
    }, 4000);
    document.addEventListener("keydown", react);
    document.addEventListener("mousedown", react);
  }, [react]);

  return (
    <div className={styles.container}>
      <Head>
        <title>Reaction test</title>
        <link rel="canonical" href="https://alexandrsa.web.app/" />
        <meta charset="utf-8" />
        <meta
          name="description"
          content="Reaction test. Try yourself, find out your reaction speed"
        />
        <meta
          name="viewport"
          content="initial-scale=1.0, width=device-width"
          key="viewport"
        />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Stack
        justify={"center"}
        align={"center"}
        textAlign={"center"}
        w={"full"}
        overflow={"hidden"}
        minH={"90vh"}
      >
        <main className={styles.main}>
          {animate === !false ? (
            <AT>
              <Heading>–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–Ω–æ–ø–∫—Éüôè</Heading>
            </AT>
          ) : (
            <OP>
              <Flex justify={"center"} align={"center"}>
                <AJ>
                  <Heading>ALexandersa</Heading>
                </AJ>
                <AT>
                  <P1>
                    <Heading fontSize={40}>ü§ú</Heading>
                  </P1>
                </AT>
                <AT>
                  <P2>
                    <Heading fontSize={40}>ü§õ</Heading>
                  </P2>
                </AT>
              </Flex>
            </OP>
          )}
        </main>
      </Stack>
    </div>
  );
}

function AT({ children }) {
  const A = {
    visible: {
      opacity: 1,
    },
    hidden: {
      opacity: 0,
    },
  };
  return (
    <motion.section initial="hidden" whileInView="visible">
      <motion.div variants={A} transition={{ delay: 0.8 }}>
        {children}
      </motion.div>
    </motion.section>
  );
}

function P1({ children }) {
  const A = {
    hidden: {
      x: -100,
      opacity: 0,
    },
    visible: {
      x: 0,
      opacity: 1,
    },
  };
  return (
    <motion.section initial="hidden" whileInView="visible">
      <motion.div variants={A} transition={{ delay: 0.8 }}>
        {children}
      </motion.div>
    </motion.section>
  );
}

function P2({ children }) {
  const A = {
    hidden: {
      x: 100,
      opacity: 0,
    },
    visible: {
      x: 0,
      opacity: 1,
    },
  };
  return (
    <motion.section initial="hidden" whileInView="visible">
      <motion.div
        transition={{ type: "spring", damping: 9, mass: 0.9, delay: 0.8 }}
        variants={A}
        animate={{ rotate: -10 }}
      >
        {children}
      </motion.div>
    </motion.section>
  );
}

function AJ({ children }) {
  const A = {
    visible: {
      opacity: 1,
    },
    hidden: {
      opacity: 0,
    },
  };
  return (
    <>
      <motion.section initial="hidden" whileInView="visible">
        <motion.div variants={A} transition={{ delay: 0.3 }}>
          {children}
        </motion.div>
      </motion.section>
    </>
  );
}

function OP({ children }) {
  const A = {
    visible: {
      opacity: 0,
    },
    hidden: {
      opacity: 1,
    },
  };
  return (
    <motion.section initial="hidden" whileInView="visible">
      <motion.div variants={A} transition={{ delay: 3 }}>
        {children}
      </motion.div>
    </motion.section>
  );
}
